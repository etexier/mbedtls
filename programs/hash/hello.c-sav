/*
 *  Classic "Hello, world" demonstration program
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */

#if !defined(MBEDTLS_CONFIG_FILE)

#include "mbedtls/config.h"

#else
#include MBEDTLS_CONFIG_FILE
#endif

#if defined(MBEDTLS_PLATFORM_C)
#include "mbedtls/platform.h"
#else

#include <stdio.h>
#include <mbedtls/bignum.h>
#include <string.h>
#include <mbedtls/rsa.h>
#include <mbedtls/asn1write.h>
#include <mbedtls/pk.h>
#include <mbedtls/x509_crl.h>
#include <mbedtls/x509_crt.h>

#define mbedtls_printf     printf
#endif

#if defined(MBEDTLS_MD5_C)

#include "mbedtls/md5.h"

#endif

unsigned char Poynt_Root_der[] = {
		0x30, 0x82, 0x03, 0xaf, 0x30, 0x82, 0x02, 0x97, 0xa0, 0x03, 0x02, 0x01,
		0x02, 0x02, 0x07, 0x4e, 0xae, 0xd6, 0x00, 0x00, 0x42, 0xf7, 0x30, 0x0d,
		0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05,
		0x00, 0x30, 0x66, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,
		0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,
		0x08, 0x0c, 0x02, 0x43, 0x41, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55,
		0x04, 0x0a, 0x0c, 0x05, 0x50, 0x6f, 0x79, 0x6e, 0x74, 0x31, 0x13, 0x30,
		0x11, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0a, 0x50, 0x6f, 0x79, 0x6e,
		0x74, 0x2d, 0x52, 0x6f, 0x6f, 0x74, 0x31, 0x25, 0x30, 0x23, 0x06, 0x09,
		0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x16, 0x73,
		0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x40, 0x76, 0x69, 0x72, 0x74, 0x75,
		0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x20, 0x17,
		0x0d, 0x31, 0x36, 0x30, 0x31, 0x31, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x5a, 0x18, 0x0f, 0x32, 0x30, 0x35, 0x30, 0x30, 0x31, 0x31, 0x39,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x66, 0x31, 0x0b, 0x30,
		0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b,
		0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x43, 0x41, 0x31,
		0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x05, 0x50, 0x6f,
		0x79, 0x6e, 0x74, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x03,
		0x0c, 0x0a, 0x50, 0x6f, 0x79, 0x6e, 0x74, 0x2d, 0x52, 0x6f, 0x6f, 0x74,
		0x31, 0x25, 0x30, 0x23, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
		0x01, 0x09, 0x01, 0x16, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
		0x40, 0x76, 0x69, 0x72, 0x74, 0x75, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e,
		0x63, 0x6f, 0x6d, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a,
		0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82,
		0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00,
		0xc5, 0x9b, 0x34, 0xcf, 0xc9, 0x2a, 0x87, 0xc9, 0x04, 0x05, 0x00, 0x52,
		0x7c, 0x56, 0x2c, 0xe2, 0x98, 0x48, 0x86, 0xee, 0x2f, 0x2f, 0x25, 0x0f,
		0x69, 0x55, 0x07, 0x87, 0x0f, 0x0f, 0xb2, 0x91, 0xcd, 0x0f, 0x91, 0x16,
		0x5a, 0xcd, 0xa0, 0x74, 0xce, 0xaf, 0x10, 0xab, 0x31, 0x48, 0x4d, 0x10,
		0x41, 0xa6, 0x37, 0xf6, 0x0a, 0xd0, 0xb8, 0x95, 0x28, 0xd7, 0x01, 0x93,
		0xb8, 0xfd, 0xf7, 0x7f, 0x59, 0x45, 0xde, 0x32, 0xe2, 0xc8, 0x23, 0x1d,
		0x29, 0xfe, 0x31, 0xcd, 0xbb, 0x06, 0x81, 0x54, 0x56, 0xb6, 0x17, 0xc1,
		0x56, 0xe8, 0x95, 0x6a, 0x9c, 0xa3, 0x19, 0x72, 0xd3, 0x42, 0xeb, 0xe6,
		0x88, 0x60, 0x6d, 0x6e, 0x30, 0x7f, 0x16, 0x3b, 0x90, 0x37, 0x33, 0x72,
		0x71, 0xc6, 0x4e, 0xb4, 0xb6, 0x8d, 0x74, 0x1e, 0x9b, 0xc8, 0x19, 0x0d,
		0xd2, 0x78, 0x99, 0x8b, 0x22, 0xf1, 0x0e, 0x56, 0xcb, 0x96, 0xf8, 0x3a,
		0xa0, 0xa8, 0x34, 0x49, 0xbb, 0xa1, 0x28, 0x8e, 0x1d, 0x15, 0x3a, 0x89,
		0x70, 0x86, 0x53, 0xfa, 0x0b, 0xdc, 0x1b, 0xca, 0xdf, 0xb8, 0x82, 0xf3,
		0x71, 0x9b, 0xbf, 0x8d, 0xa0, 0x56, 0x36, 0xcb, 0xf8, 0x19, 0x8f, 0x78,
		0x5e, 0x7f, 0xe7, 0x23, 0x32, 0xf9, 0xa4, 0x01, 0x46, 0xde, 0xe1, 0x39,
		0x61, 0xd0, 0xff, 0xa4, 0x54, 0x69, 0xac, 0x5e, 0x1b, 0x55, 0xde, 0x7f,
		0x31, 0x4a, 0x64, 0x26, 0x94, 0x01, 0x5b, 0x4a, 0x0d, 0x32, 0xb7, 0xc9,
		0x3c, 0x82, 0x85, 0x2a, 0x42, 0x27, 0x45, 0x16, 0x4e, 0xaa, 0xf5, 0x84,
		0xeb, 0xe2, 0x12, 0x19, 0x61, 0xc5, 0x3d, 0xb0, 0x38, 0x86, 0xef, 0x3b,
		0x2f, 0x28, 0xc8, 0xa4, 0x9f, 0x4d, 0x78, 0xbc, 0x6b, 0x42, 0x9e, 0x00,
		0xa8, 0xd9, 0x72, 0x7f, 0x1c, 0x72, 0xbd, 0x87, 0xf5, 0x61, 0x3b, 0x4b,
		0xcf, 0xfb, 0x05, 0xb7, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x60, 0x30,
		0x5e, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16,
		0x80, 0x14, 0xe5, 0xc2, 0x3b, 0x77, 0x9e, 0xd4, 0x35, 0xa1, 0x37, 0x49,
		0xa0, 0x2a, 0x77, 0xee, 0xfe, 0xb2, 0x55, 0xd6, 0x8a, 0x8e, 0x30, 0x1d,
		0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xe5, 0xc2, 0x3b,
		0x77, 0x9e, 0xd4, 0x35, 0xa1, 0x37, 0x49, 0xa0, 0x2a, 0x77, 0xee, 0xfe,
		0xb2, 0x55, 0xd6, 0x8a, 0x8e, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13,
		0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0b,
		0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x01, 0x86, 0x30,
		0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b,
		0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0xa3, 0xf6, 0x33, 0xf2, 0x10,
		0xc6, 0x5b, 0xdf, 0x60, 0x5e, 0xe5, 0x39, 0xb7, 0x2c, 0xb0, 0xcd, 0x94,
		0x21, 0xde, 0xe0, 0xd1, 0x5b, 0x47, 0xe4, 0x4f, 0x85, 0x6f, 0x77, 0x7a,
		0xc3, 0xed, 0xfa, 0x09, 0x3d, 0x3b, 0x31, 0x62, 0x3f, 0x7e, 0xf3, 0x36,
		0x3d, 0x40, 0xbe, 0xa0, 0x9e, 0x4b, 0x5c, 0xe3, 0x5f, 0x3d, 0xf5, 0xe2,
		0x17, 0x7d, 0xe0, 0xfe, 0xe0, 0xae, 0xcd, 0x3a, 0x14, 0xb0, 0xf4, 0x9f,
		0x77, 0x5e, 0xa9, 0x95, 0x84, 0xf3, 0xed, 0xa7, 0x65, 0x02, 0xf7, 0xf1,
		0x48, 0x35, 0x6e, 0xbb, 0xfb, 0x33, 0x27, 0xf7, 0x8a, 0x27, 0x90, 0x10,
		0xed, 0x87, 0x56, 0xf6, 0x83, 0x74, 0x3b, 0xc3, 0xc3, 0xc4, 0x07, 0x9f,
		0xc0, 0xae, 0xf3, 0xfd, 0xdf, 0x56, 0x10, 0x4e, 0xed, 0x9a, 0xf2, 0xb7,
		0x97, 0x1a, 0xfb, 0x4a, 0xeb, 0x05, 0xad, 0xf3, 0x3a, 0x9f, 0x86, 0xcf,
		0x51, 0xf9, 0xd1, 0x41, 0x23, 0xa4, 0xfe, 0x39, 0xbc, 0x94, 0x5a, 0xc8,
		0x09, 0xeb, 0x83, 0xb6, 0x53, 0x65, 0xa5, 0x9c, 0xc2, 0x7b, 0xdc, 0x2c,
		0xef, 0x9c, 0x27, 0x59, 0xaa, 0x63, 0xb2, 0xfa, 0x9d, 0x6c, 0xb7, 0x05,
		0xc7, 0x6c, 0x8e, 0xee, 0x78, 0x22, 0x22, 0x46, 0x8b, 0xa6, 0x8e, 0x4f,
		0x6d, 0x33, 0x8e, 0x4a, 0xeb, 0x69, 0x68, 0xed, 0x0a, 0x25, 0x95, 0x17,
		0xce, 0x97, 0x2d, 0x84, 0x31, 0xa5, 0x94, 0x9d, 0xd2, 0xbf, 0x6c, 0x91,
		0x40, 0xa0, 0xd2, 0xd0, 0xa3, 0xd2, 0xbf, 0xfb, 0x13, 0xf3, 0xa9, 0x46,
		0xf1, 0x76, 0x47, 0xff, 0x12, 0x70, 0x50, 0xaf, 0x95, 0x0e, 0x94, 0x3b,
		0xeb, 0xbf, 0x99, 0x0b, 0xf2, 0xab, 0xbe, 0x54, 0x1d, 0x86, 0x66, 0xba,
		0xe8, 0x40, 0xc4, 0xda, 0x52, 0x3c, 0x2d, 0xf1, 0x21, 0x43, 0x96, 0x09,
		0x68, 0xc2, 0xb4, 0x8b, 0xa3, 0xe2, 0xb5, 0xe0, 0xc2, 0xa5, 0x6c
};
unsigned int Poynt_Root_der_len = 947;


unsigned char RKLSubCA_der[] = {
		0x30, 0x82, 0x03, 0xe0, 0x30, 0x82, 0x02, 0xc8, 0xa0, 0x03, 0x02, 0x01,
		0x02, 0x02, 0x07, 0x4e, 0xae, 0xd6, 0x00, 0x00, 0x45, 0x25, 0x30, 0x0d,
		0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05,
		0x00, 0x30, 0x81, 0x81, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,
		0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
		0x04, 0x08, 0x0c, 0x02, 0x43, 0x41, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03,
		0x55, 0x04, 0x0a, 0x0c, 0x05, 0x50, 0x6f, 0x79, 0x6e, 0x74, 0x31, 0x16,
		0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x41, 0x0c, 0x0d, 0x50, 0x6f, 0x79,
		0x6e, 0x74, 0x2d, 0x53, 0x75, 0x62, 0x52, 0x6f, 0x6f, 0x74, 0x31, 0x16,
		0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0d, 0x50, 0x6f, 0x79,
		0x6e, 0x74, 0x2d, 0x53, 0x75, 0x62, 0x52, 0x6f, 0x6f, 0x74, 0x31, 0x25,
		0x30, 0x23, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09,
		0x01, 0x16, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x40, 0x76,
		0x69, 0x72, 0x74, 0x75, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x63, 0x6f,
		0x6d, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x36, 0x30, 0x31, 0x32, 0x31, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0x0d, 0x34, 0x39, 0x30, 0x31,
		0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x7d, 0x31,
		0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53,
		0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x43,
		0x41, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x05,
		0x50, 0x6f, 0x79, 0x6e, 0x74, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55,
		0x04, 0x41, 0x0c, 0x0d, 0x50, 0x6f, 0x79, 0x6e, 0x74, 0x2d, 0x53, 0x75,
		0x62, 0x52, 0x6f, 0x6f, 0x74, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55,
		0x04, 0x03, 0x0c, 0x09, 0x52, 0x4b, 0x4c, 0x20, 0x53, 0x75, 0x62, 0x43,
		0x41, 0x31, 0x25, 0x30, 0x23, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
		0x0d, 0x01, 0x09, 0x01, 0x16, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
		0x74, 0x40, 0x76, 0x69, 0x72, 0x74, 0x75, 0x63, 0x72, 0x79, 0x70, 0x74,
		0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09,
		0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03,
		0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01,
		0x00, 0xbb, 0x47, 0x1b, 0x9d, 0x84, 0x17, 0xf1, 0x5e, 0xe5, 0x58, 0x85,
		0xa8, 0x16, 0x00, 0x92, 0xf5, 0x8b, 0x5f, 0xae, 0x97, 0xc9, 0xdf, 0x5f,
		0xb8, 0xb0, 0x54, 0x19, 0x47, 0x75, 0x8a, 0x1b, 0x8e, 0xcb, 0xbe, 0x91,
		0x5f, 0xeb, 0x0d, 0x5a, 0x61, 0x53, 0xe8, 0x07, 0x3d, 0xbe, 0x6a, 0xad,
		0xc7, 0xe6, 0x09, 0xcd, 0xd0, 0xf8, 0x1c, 0xba, 0xe8, 0xd0, 0x39, 0xbc,
		0xd9, 0x1b, 0x3f, 0x79, 0x65, 0x25, 0x25, 0x97, 0xd8, 0xb6, 0xc8, 0x1e,
		0xe9, 0xfd, 0x2c, 0xd9, 0x5e, 0x49, 0xed, 0x08, 0x16, 0x71, 0x63, 0x1e,
		0x89, 0x61, 0x2b, 0x60, 0xbd, 0xc6, 0x28, 0x53, 0xa0, 0x38, 0x6b, 0x67,
		0xaf, 0xcf, 0x82, 0x4c, 0x2f, 0x0b, 0xbf, 0x42, 0x11, 0xb5, 0xf1, 0xd1,
		0x05, 0x8d, 0xc4, 0x8a, 0x8a, 0xf7, 0xa1, 0xd0, 0xe1, 0x40, 0xa6, 0xef,
		0xd7, 0x67, 0xda, 0x3f, 0x9d, 0xdb, 0x48, 0x3b, 0xfe, 0xbd, 0xbf, 0x83,
		0x10, 0xfd, 0x1f, 0x0c, 0x25, 0xfd, 0x6e, 0x52, 0x8d, 0x7b, 0xad, 0x13,
		0x4e, 0xa6, 0xbe, 0x26, 0x27, 0x9d, 0x38, 0x6f, 0xc9, 0x84, 0x33, 0x8f,
		0xc6, 0x5a, 0x19, 0x97, 0x26, 0xef, 0x22, 0xaa, 0xd8, 0x57, 0xdc, 0x1f,
		0xc0, 0xcd, 0xe8, 0x63, 0x60, 0x59, 0xa7, 0xf8, 0xd6, 0xb7, 0x56, 0x7a,
		0xef, 0xa2, 0xa3, 0x7b, 0xe6, 0x3d, 0xf0, 0xa0, 0xba, 0xe1, 0xbc, 0x74,
		0x4c, 0xbc, 0x05, 0x11, 0xf5, 0xdf, 0xc3, 0xca, 0x12, 0x01, 0xfd, 0x58,
		0x39, 0x80, 0x00, 0x86, 0x3f, 0x2f, 0x9c, 0x42, 0x53, 0xee, 0x42, 0xa8,
		0x1d, 0x55, 0xd5, 0xd6, 0xd3, 0x86, 0xca, 0xe1, 0xfb, 0x66, 0x40, 0x42,
		0xda, 0x41, 0xa8, 0x75, 0xfa, 0x74, 0xae, 0x8b, 0x7a, 0x82, 0x12, 0xd1,
		0x69, 0xae, 0xaf, 0xc1, 0x65, 0x47, 0xa5, 0x2d, 0x96, 0x9f, 0x0d, 0xbb,
		0xab, 0xe6, 0x70, 0x2f, 0xeb, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x60,
		0x30, 0x5e, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30,
		0x16, 0x80, 0x14, 0xd2, 0xd3, 0x62, 0x8c, 0x39, 0xf0, 0x84, 0xa6, 0x98,
		0x58, 0xe7, 0x8b, 0x8a, 0x34, 0x11, 0x5d, 0x43, 0xbb, 0x1f, 0xef, 0x30,
		0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x76, 0x81,
		0x52, 0xfc, 0xb1, 0x4b, 0x87, 0x79, 0x6e, 0x7d, 0xb2, 0xd3, 0xd2, 0xf8,
		0x7a, 0x79, 0x45, 0xba, 0x94, 0xb1, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d,
		0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
		0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x01, 0x86,
		0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
		0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x37, 0xe6, 0x60, 0xa7,
		0x2c, 0x90, 0x51, 0x38, 0xf2, 0x9c, 0xaf, 0x85, 0xf5, 0x0d, 0x0f, 0x8b,
		0x97, 0xd1, 0xae, 0x22, 0x46, 0xb4, 0x80, 0x3d, 0x0f, 0x66, 0x02, 0xa6,
		0x35, 0x00, 0x6f, 0xd4, 0x6d, 0x94, 0x18, 0x85, 0xa1, 0x1f, 0x5d, 0xc1,
		0x80, 0x01, 0xaa, 0xf0, 0xad, 0x43, 0xcd, 0x32, 0xf6, 0x9c, 0x5d, 0x56,
		0x9d, 0x0d, 0x64, 0x39, 0xd1, 0xc5, 0x2f, 0x4c, 0x47, 0x0e, 0xc0, 0x7c,
		0x88, 0x92, 0xe6, 0xd1, 0xcc, 0x6a, 0x1d, 0x67, 0x0b, 0xd6, 0x8f, 0xe4,
		0xff, 0x4d, 0x09, 0x94, 0x9d, 0xeb, 0x40, 0x83, 0xa3, 0x73, 0x9c, 0xf6,
		0x72, 0x4a, 0xd4, 0xdb, 0xe3, 0xd9, 0x9b, 0x89, 0x10, 0xbc, 0x9b, 0x42,
		0x4e, 0x30, 0x50, 0x1c, 0xa7, 0x96, 0x94, 0x63, 0x97, 0xc4, 0x52, 0x8f,
		0x14, 0xb7, 0x0e, 0xaf, 0x1d, 0x6a, 0x1b, 0x9c, 0x0e, 0x44, 0x46, 0x12,
		0xee, 0x46, 0x58, 0xc7, 0x19, 0x8a, 0x9c, 0x18, 0x16, 0xc0, 0x48, 0x40,
		0xde, 0x26, 0x03, 0x9e, 0x46, 0xa2, 0x3a, 0x83, 0xe6, 0xe6, 0xa7, 0x51,
		0xa3, 0xa5, 0x76, 0x54, 0xe1, 0xb9, 0xac, 0x36, 0x01, 0x49, 0x3a, 0x8f,
		0x71, 0xc0, 0x73, 0xe9, 0x4c, 0xa2, 0x2b, 0x4c, 0xdb, 0xc7, 0xb9, 0xed,
		0x7f, 0x7d, 0xd8, 0x62, 0x76, 0xfb, 0xe1, 0xcc, 0xe8, 0x9b, 0xa2, 0x45,
		0x97, 0x45, 0xf6, 0xd7, 0x9f, 0x5d, 0x0a, 0xb0, 0xae, 0xe7, 0x61, 0xd7,
		0xcd, 0x25, 0x9d, 0xb1, 0x1d, 0xff, 0x26, 0xbd, 0x38, 0x92, 0x5d, 0x4f,
		0x51, 0x9d, 0x4a, 0x93, 0x99, 0xaa, 0x45, 0x76, 0xa8, 0x54, 0x42, 0xec,
		0x16, 0xe6, 0x80, 0x90, 0xb0, 0xab, 0x8c, 0x7c, 0x04, 0x8f, 0x10, 0x17,
		0x84, 0xe8, 0xbb, 0xe3, 0xb0, 0x77, 0x05, 0x42, 0x6c, 0x84, 0xae, 0xe7,
		0xe4, 0x99, 0xc2, 0x3f, 0x6e, 0xd4, 0x3c, 0xa1, 0xc8, 0x06, 0xa2, 0x89
};
unsigned int RKLSubCA_der_len = 996;

unsigned char LoaderRKLSubCA_der[] = {
		0x30, 0x82, 0x03, 0xe6, 0x30, 0x82, 0x02, 0xce, 0xa0, 0x03, 0x02, 0x01,
		0x02, 0x02, 0x07, 0x4e, 0xae, 0xd6, 0x00, 0x00, 0x45, 0x2c, 0x30, 0x0d,
		0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05,
		0x00, 0x30, 0x7d, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,
		0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,
		0x08, 0x0c, 0x02, 0x43, 0x41, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55,
		0x04, 0x0a, 0x0c, 0x05, 0x50, 0x6f, 0x79, 0x6e, 0x74, 0x31, 0x16, 0x30,
		0x14, 0x06, 0x03, 0x55, 0x04, 0x41, 0x0c, 0x0d, 0x50, 0x6f, 0x79, 0x6e,
		0x74, 0x2d, 0x53, 0x75, 0x62, 0x52, 0x6f, 0x6f, 0x74, 0x31, 0x12, 0x30,
		0x10, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x09, 0x52, 0x4b, 0x4c, 0x20,
		0x53, 0x75, 0x62, 0x43, 0x41, 0x31, 0x25, 0x30, 0x23, 0x06, 0x09, 0x2a,
		0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x16, 0x73, 0x75,
		0x70, 0x70, 0x6f, 0x72, 0x74, 0x40, 0x76, 0x69, 0x72, 0x74, 0x75, 0x63,
		0x72, 0x79, 0x70, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0x0d,
		0x31, 0x36, 0x30, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x5a, 0x17, 0x0d, 0x34, 0x39, 0x30, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x5a, 0x30, 0x81, 0x87, 0x31, 0x0b, 0x30, 0x09, 0x06,
		0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09,
		0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x43, 0x41, 0x31, 0x0e, 0x30,
		0x0c, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x05, 0x50, 0x6f, 0x79, 0x6e,
		0x74, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x41, 0x0c, 0x10,
		0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x20, 0x52, 0x4b, 0x4c, 0x20, 0x53,
		0x75, 0x62, 0x43, 0x41, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04,
		0x03, 0x0c, 0x10, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x20, 0x52, 0x4b,
		0x4c, 0x20, 0x53, 0x75, 0x62, 0x43, 0x41, 0x31, 0x25, 0x30, 0x23, 0x06,
		0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x16,
		0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x40, 0x76, 0x69, 0x72, 0x74,
		0x75, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82,
		0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
		0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82,
		0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xbf, 0xb3, 0xa3, 0x54, 0x12,
		0xad, 0x09, 0x32, 0x6c, 0x9d, 0xd9, 0xf1, 0x5c, 0xdd, 0xef, 0xd7, 0x1c,
		0xc5, 0x5d, 0x52, 0x73, 0xd5, 0xd9, 0x8a, 0x94, 0x02, 0x82, 0xdb, 0xd8,
		0xee, 0x2e, 0xc1, 0x3f, 0x2d, 0xa6, 0xae, 0x42, 0x5f, 0xea, 0xab, 0x30,
		0x37, 0x34, 0x18, 0x00, 0x51, 0x53, 0xac, 0x88, 0x08, 0x88, 0xa7, 0x4b,
		0x96, 0xae, 0xc1, 0x6a, 0x35, 0x51, 0x98, 0x35, 0x7a, 0xf5, 0x8b, 0xce,
		0x27, 0x9e, 0xf3, 0xcf, 0x2c, 0x1d, 0x35, 0x94, 0x3d, 0x0c, 0x77, 0x01,
		0x6c, 0x94, 0xe2, 0x90, 0x18, 0x4e, 0x88, 0x2f, 0xc3, 0x19, 0xff, 0xdd,
		0x5b, 0xb3, 0x4e, 0xb2, 0xdf, 0xcd, 0xb8, 0xb8, 0x32, 0x2a, 0x96, 0xdc,
		0x03, 0x4b, 0x3e, 0x2b, 0x6f, 0x01, 0x26, 0xdd, 0x34, 0xe7, 0x78, 0x97,
		0x03, 0x79, 0x19, 0xb3, 0xc9, 0xe7, 0xe5, 0xa0, 0xdb, 0x7d, 0x72, 0x5f,
		0x80, 0xd9, 0x3b, 0x28, 0xec, 0xbf, 0x50, 0x94, 0xfa, 0x45, 0x7b, 0xab,
		0xcf, 0x7b, 0xa6, 0x40, 0xfe, 0x48, 0x97, 0xeb, 0x65, 0xc4, 0xc2, 0xe4,
		0x97, 0x47, 0xe4, 0x76, 0x6c, 0xf6, 0x77, 0x5c, 0xae, 0x51, 0xdd, 0xf1,
		0x6d, 0x2a, 0x26, 0xaf, 0xcd, 0x98, 0x87, 0xba, 0xc4, 0xf9, 0x3d, 0xb8,
		0xa4, 0x8e, 0xc0, 0xb2, 0x9c, 0xdd, 0x28, 0x08, 0x39, 0x7c, 0x30, 0x55,
		0x34, 0xcc, 0xd6, 0xdf, 0x6f, 0xaa, 0xa4, 0x1b, 0xca, 0xe7, 0x88, 0x69,
		0xc1, 0x42, 0x39, 0xc6, 0x5d, 0x77, 0xae, 0x11, 0xe8, 0x68, 0x84, 0xf3,
		0x13, 0x06, 0xe6, 0xeb, 0xc4, 0x47, 0x09, 0x7c, 0x6a, 0x4e, 0x4c, 0xed,
		0x99, 0x93, 0xf2, 0xa9, 0xa0, 0x69, 0xab, 0x36, 0x38, 0x6f, 0x18, 0x47,
		0x2b, 0x0d, 0x3e, 0x73, 0xa6, 0x24, 0xab, 0x17, 0x03, 0x14, 0x5e, 0x33,
		0xb1, 0x35, 0x4a, 0xdf, 0xb3, 0xae, 0x3c, 0xd3, 0x75, 0x0f, 0xbb, 0x02,
		0x03, 0x01, 0x00, 0x01, 0xa3, 0x60, 0x30, 0x5e, 0x30, 0x1f, 0x06, 0x03,
		0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x76, 0x81, 0x52,
		0xfc, 0xb1, 0x4b, 0x87, 0x79, 0x6e, 0x7d, 0xb2, 0xd3, 0xd2, 0xf8, 0x7a,
		0x79, 0x45, 0xba, 0x94, 0xb1, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e,
		0x04, 0x16, 0x04, 0x14, 0x0b, 0x8c, 0x64, 0xe4, 0x21, 0x23, 0xb1, 0x40,
		0xd4, 0x74, 0xc6, 0xee, 0x58, 0xe2, 0x39, 0x2e, 0x11, 0xc5, 0x17, 0x6d,
		0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05,
		0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f,
		0x04, 0x04, 0x03, 0x02, 0x01, 0x86, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86,
		0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01,
		0x01, 0x00, 0x3e, 0x9d, 0x55, 0x5c, 0x25, 0x30, 0xd3, 0xec, 0x2a, 0xbe,
		0x88, 0x30, 0x61, 0xa4, 0x2c, 0xe2, 0x11, 0xd6, 0x9f, 0x29, 0xd7, 0x36,
		0x4a, 0xef, 0xe0, 0x18, 0x85, 0x15, 0x3f, 0xe5, 0xe1, 0xf2, 0x39, 0xa3,
		0x05, 0xf4, 0xfa, 0x72, 0x54, 0x79, 0xb7, 0x04, 0x35, 0x05, 0x38, 0x97,
		0x35, 0x01, 0xca, 0x7d, 0x76, 0xbe, 0x53, 0x3d, 0x4a, 0x76, 0xbe, 0x97,
		0xa0, 0x8b, 0xc8, 0xa9, 0xa4, 0x6e, 0x4c, 0x17, 0xe2, 0xdf, 0x4e, 0x96,
		0x50, 0xc4, 0xbd, 0xdf, 0x81, 0x65, 0x25, 0x69, 0x91, 0x52, 0x1f, 0xe7,
		0x92, 0xfe, 0x28, 0x17, 0x4c, 0x14, 0x85, 0x98, 0xa1, 0x0f, 0x79, 0x10,
		0xce, 0xdc, 0xb5, 0xeb, 0x23, 0xd9, 0x99, 0x9c, 0x41, 0xbd, 0x69, 0x37,
		0xf6, 0x91, 0x53, 0x72, 0x9e, 0x21, 0x1f, 0xe1, 0x11, 0xe9, 0x48, 0x1d,
		0xe2, 0x1f, 0x18, 0x4a, 0x1a, 0x0b, 0x1b, 0x34, 0xdf, 0x15, 0xbb, 0xfc,
		0x25, 0xcd, 0x1a, 0x31, 0x7a, 0x49, 0xf2, 0x70, 0x31, 0x04, 0xf0, 0x34,
		0xca, 0xb2, 0x4c, 0xcf, 0xfb, 0xfc, 0x1e, 0xee, 0x68, 0xdb, 0x13, 0x40,
		0x2a, 0xd9, 0x2c, 0x5b, 0xe4, 0xde, 0x61, 0x4e, 0xe6, 0x31, 0xdf, 0xd1,
		0x47, 0x11, 0xc2, 0xdb, 0x53, 0xb5, 0x8b, 0x33, 0xae, 0x1c, 0x65, 0xaa,
		0xc5, 0x68, 0xc6, 0x55, 0x7d, 0x05, 0xb8, 0xc0, 0x5a, 0x01, 0xc3, 0xdd,
		0x59, 0x18, 0x20, 0x4f, 0x5b, 0xff, 0x79, 0x8c, 0xe8, 0xd7, 0x35, 0xf2,
		0xb7, 0xf5, 0x80, 0x19, 0x09, 0x81, 0xb4, 0xaf, 0xdb, 0x9d, 0x30, 0x6f,
		0x45, 0x1b, 0x46, 0x75, 0xe1, 0xf5, 0x6c, 0x1d, 0x4e, 0x71, 0xa2, 0xed,
		0xec, 0xd0, 0x5e, 0x38, 0x1f, 0xa2, 0xa6, 0x00, 0x33, 0xdf, 0xe8, 0x13,
		0xdb, 0x4a, 0x39, 0x38, 0xc9, 0x45, 0xe2, 0x4b, 0x55, 0xb9, 0xd7, 0x78,
		0xef, 0xaa, 0x63, 0xb6, 0xbe, 0x4b
};
unsigned int LoaderRKLSubCA_der_len = 1002;

unsigned char PoyntSubRoot_der[] = {
		0x30, 0x82, 0x03, 0xcb, 0x30, 0x82, 0x02, 0xb3, 0xa0, 0x03, 0x02, 0x01,
		0x02, 0x02, 0x07, 0x4e, 0xae, 0xd6, 0x00, 0x00, 0x42, 0xf8, 0x30, 0x0d,
		0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05,
		0x00, 0x30, 0x66, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,
		0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,
		0x08, 0x0c, 0x02, 0x43, 0x41, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55,
		0x04, 0x0a, 0x0c, 0x05, 0x50, 0x6f, 0x79, 0x6e, 0x74, 0x31, 0x13, 0x30,
		0x11, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0a, 0x50, 0x6f, 0x79, 0x6e,
		0x74, 0x2d, 0x52, 0x6f, 0x6f, 0x74, 0x31, 0x25, 0x30, 0x23, 0x06, 0x09,
		0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x16, 0x73,
		0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x40, 0x76, 0x69, 0x72, 0x74, 0x75,
		0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x20, 0x17,
		0x0d, 0x31, 0x36, 0x30, 0x31, 0x31, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x5a, 0x18, 0x0f, 0x32, 0x30, 0x35, 0x30, 0x30, 0x31, 0x31, 0x39,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x81, 0x81, 0x31, 0x0b,
		0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31,
		0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x43, 0x41,
		0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x05, 0x50,
		0x6f, 0x79, 0x6e, 0x74, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04,
		0x41, 0x0c, 0x0d, 0x50, 0x6f, 0x79, 0x6e, 0x74, 0x2d, 0x53, 0x75, 0x62,
		0x52, 0x6f, 0x6f, 0x74, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04,
		0x03, 0x0c, 0x0d, 0x50, 0x6f, 0x79, 0x6e, 0x74, 0x2d, 0x53, 0x75, 0x62,
		0x52, 0x6f, 0x6f, 0x74, 0x31, 0x25, 0x30, 0x23, 0x06, 0x09, 0x2a, 0x86,
		0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x16, 0x73, 0x75, 0x70,
		0x70, 0x6f, 0x72, 0x74, 0x40, 0x76, 0x69, 0x72, 0x74, 0x75, 0x63, 0x72,
		0x79, 0x70, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82, 0x01, 0x22, 0x30,
		0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,
		0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02,
		0x82, 0x01, 0x01, 0x00, 0xd1, 0x08, 0xae, 0x3c, 0x7f, 0x5e, 0x98, 0x5e,
		0xb1, 0x99, 0xec, 0x4f, 0x46, 0x18, 0x41, 0xd1, 0x35, 0x6c, 0xf1, 0x83,
		0x1b, 0xc0, 0x41, 0xb3, 0x7b, 0xd7, 0xf5, 0xa3, 0xf7, 0x61, 0x86, 0x2f,
		0x82, 0xb3, 0x70, 0xbf, 0x96, 0xd8, 0xf7, 0x71, 0x2b, 0x9c, 0x32, 0xc3,
		0x12, 0xb1, 0xa6, 0x1c, 0xb3, 0xce, 0x78, 0x61, 0x34, 0xda, 0xf7, 0xd3,
		0x70, 0xfc, 0xc2, 0x3f, 0xa4, 0x90, 0xed, 0x08, 0x26, 0x32, 0x83, 0xaf,
		0x3b, 0x9c, 0x79, 0xa7, 0xba, 0x6d, 0xef, 0x4e, 0x0f, 0x9d, 0xc2, 0x04,
		0x65, 0xbc, 0xb1, 0x3a, 0x2f, 0x2e, 0x1b, 0x57, 0xf8, 0x7b, 0xf6, 0x15,
		0xe8, 0x98, 0x44, 0x26, 0x31, 0xd1, 0xc0, 0xf4, 0x2d, 0xc9, 0x77, 0x24,
		0xb6, 0xe6, 0xe4, 0x79, 0x98, 0x5c, 0x08, 0x04, 0x05, 0x34, 0xf0, 0xd3,
		0x9a, 0x99, 0xe3, 0xc4, 0xdc, 0x52, 0x38, 0x61, 0x30, 0xbd, 0xd8, 0xf4,
		0xb3, 0xb1, 0xa9, 0x77, 0xe8, 0x8f, 0x97, 0x60, 0x64, 0xb0, 0x7e, 0x3e,
		0xe5, 0x6a, 0x36, 0x90, 0xc6, 0x0a, 0x97, 0x93, 0x28, 0xab, 0xc4, 0xb2,
		0x03, 0xc8, 0x8f, 0x15, 0xdc, 0x7c, 0x58, 0xa7, 0xbf, 0x45, 0x95, 0x70,
		0x19, 0x5d, 0xcb, 0x0c, 0x22, 0x5e, 0x26, 0x12, 0x93, 0x9d, 0xb7, 0xc0,
		0x24, 0xd4, 0xbb, 0x51, 0x34, 0x4e, 0x94, 0x59, 0x71, 0x38, 0xc1, 0x57,
		0xb2, 0x08, 0xce, 0xa9, 0x56, 0x5c, 0x7a, 0x26, 0x9a, 0x61, 0x08, 0x33,
		0x36, 0x23, 0x07, 0x3f, 0xfb, 0x7c, 0x28, 0x5d, 0xbc, 0xb8, 0x78, 0xca,
		0x88, 0xa7, 0xa8, 0xfe, 0xc1, 0xa1, 0xd0, 0x32, 0xbe, 0x27, 0x48, 0x86,
		0x5e, 0x98, 0x8d, 0x36, 0x26, 0xbb, 0xc9, 0x0f, 0xf3, 0x04, 0x7c, 0xe8,
		0xaf, 0x53, 0xac, 0x43, 0xe9, 0xc7, 0x21, 0x4d, 0x7c, 0x30, 0x7e, 0x79,
		0x34, 0x3d, 0xbd, 0xf9, 0xc2, 0x4f, 0xf9, 0xdd, 0x02, 0x03, 0x01, 0x00,
		0x01, 0xa3, 0x60, 0x30, 0x5e, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23,
		0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xe5, 0xc2, 0x3b, 0x77, 0x9e, 0xd4,
		0x35, 0xa1, 0x37, 0x49, 0xa0, 0x2a, 0x77, 0xee, 0xfe, 0xb2, 0x55, 0xd6,
		0x8a, 0x8e, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04,
		0x14, 0xd2, 0xd3, 0x62, 0x8c, 0x39, 0xf0, 0x84, 0xa6, 0x98, 0x58, 0xe7,
		0x8b, 0x8a, 0x34, 0x11, 0x5d, 0x43, 0xbb, 0x1f, 0xef, 0x30, 0x0f, 0x06,
		0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01,
		0x01, 0xff, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03,
		0x02, 0x01, 0x86, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
		0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x7e,
		0x21, 0x98, 0x09, 0xb2, 0x23, 0xdb, 0xc9, 0x16, 0x4f, 0x9b, 0x50, 0x93,
		0x25, 0x5e, 0x9d, 0xab, 0x1f, 0x5a, 0xda, 0x45, 0x80, 0x5e, 0x06, 0x6c,
		0x7c, 0xc1, 0x20, 0x04, 0xfe, 0x01, 0x30, 0x9d, 0x35, 0xec, 0x5b, 0x3d,
		0xd2, 0xcf, 0x5a, 0x8e, 0x77, 0x18, 0xab, 0x9e, 0xd3, 0x66, 0x96, 0x64,
		0x1f, 0xd3, 0xcd, 0x59, 0x5e, 0x28, 0xbc, 0x70, 0x03, 0x94, 0xa9, 0x6f,
		0xea, 0x58, 0xcd, 0x6f, 0xc4, 0x88, 0xf4, 0x12, 0x47, 0x73, 0x3d, 0x3a,
		0x3b, 0xec, 0x0b, 0xda, 0x28, 0x83, 0x90, 0xaf, 0x03, 0xb2, 0x1b, 0xc1,
		0xa2, 0x12, 0x7d, 0xb2, 0x75, 0x6f, 0xf1, 0x51, 0x1d, 0x99, 0x6f, 0x9f,
		0x17, 0x96, 0x11, 0x46, 0x36, 0x8f, 0x8c, 0x1e, 0x3b, 0x41, 0x20, 0xf8,
		0x18, 0x51, 0xbc, 0xf5, 0xda, 0xa3, 0xe3, 0x80, 0x16, 0xd6, 0x68, 0xa8,
		0x46, 0xc7, 0xe7, 0xb8, 0x63, 0x96, 0x80, 0x53, 0xa5, 0x8b, 0xc3, 0xc1,
		0xd5, 0xc4, 0xf8, 0x9a, 0x42, 0xdf, 0xf9, 0xa9, 0x13, 0xcf, 0x10, 0xf3,
		0xf7, 0xc9, 0x3f, 0xd5, 0xce, 0xfe, 0xe7, 0xb9, 0x6a, 0xcd, 0xc9, 0xa7,
		0xed, 0xf3, 0x71, 0x58, 0x6d, 0xe4, 0x03, 0x94, 0xf4, 0x97, 0x84, 0xaa,
		0x37, 0xb8, 0xf9, 0x57, 0x9f, 0x9c, 0x3a, 0xfa, 0xb5, 0x91, 0x55, 0xbc,
		0xef, 0x1b, 0x2e, 0x36, 0x7f, 0xb7, 0x9e, 0x65, 0xec, 0x14, 0xa2, 0x13,
		0x5e, 0x20, 0xa0, 0xff, 0x4a, 0xe0, 0x3a, 0xfe, 0xc6, 0xb1, 0xd3, 0xd2,
		0x66, 0xe4, 0x08, 0xca, 0x37, 0x79, 0xc4, 0x89, 0xf6, 0x1d, 0xc5, 0xf3,
		0x9a, 0xc2, 0x6f, 0xf1, 0x87, 0x02, 0x26, 0x94, 0x99, 0x6a, 0x68, 0x08,
		0x9c, 0xc1, 0x8e, 0xc5, 0x48, 0x94, 0x9a, 0x7b, 0x21, 0x24, 0x31, 0xc9,
		0x8e, 0xfd, 0x71, 0x30, 0x29, 0xe0, 0x44, 0x3f, 0x8d, 0x81, 0x9c, 0xc0,
		0x0d, 0x7a, 0x9e
};
unsigned int PoyntSubRoot_der_len = 975;

/**
 * "12AB" -> {0x12, 0xAB}
 * "1F" -> {0x1F}
 */
int An2Bytes(char *alphanumerics, unsigned char *bytes, unsigned int anLen)
{
	unsigned int i;
	if ((anLen % 2) && anLen == 0)
	{
		return 1;
	}

	for (i = 0; i < anLen; i++)
	{
		char c1 = alphanumerics[i]; //"1"
		char c2 = alphanumerics[i + 1]; // "F"
		int j = i / 2;
		bytes[j] = (unsigned char) ((c1 < 'A' ? c1 - '0' : c1 - 'A' + 10) << 4);
		bytes[j] = (unsigned char) (bytes[j] | (c2 < 'A' ? c2 - '0' : c2 - 'A' + 10));
		i++;
	}
	return 0;
}

char anN[] = "D0C30B5B8A3B1A5EE1A51236A3FF02F394FF8D42BA9F2099055B114877B89DB87C59934F0358616EE65A3C5D71185F0411A2DC0C4D5A18DF1FCD1F7544173010745E422B61760FDA4F578736805132F668C7D59649150648352437CA322EEC44E80F80D07BF28B8832FB3F90E3225BE5399C7FFA0505E7BA79729A6B7D339E1165F25274229F0DB69ED74CE50AA4765B76A95AF23A533D87D27288B83292FFFB2DDC6E156A1E5F5A0956C3B0ACF041631E3492DAE1D7315282BE391621D038B330A6CA83C781F2A901CA0C94E7880251FE2F6487AE317DC751D86C0BDBD8C2687B855930F00E5F4487B3504EB9A90C67794203A9FFBED7C78E798859B3D28BA9";
char anE[] = "010001";
char anD[] = "7E7ACD34C6C90C2F1412C8B8261FE88FDF63FD17C2AD8A386B9043265EB2918C267AB6CF163DC3BA4701C0B4F44249BED358926D39A82E8D705CFC84359EBED6194ACA5832122F849AB173104829E9F074872E16816CA583B5FE9D767975085CAF24456D0ACB66523C6110A01D9CC1845DA53DBC22B2F3347D443BDE87DA70170D82F781A395C96C9C9A7CCAAF0D33C62EAE572086262B698E4158501475EE8968455B0BC39C3BECB1162A29056CD4C6AB7EFB908A34AC75DE4116426D1D02360BDE0D0410A01D59BA2F4B1314736F6F6E2307959380F7F244FDCF3FACC31B2AA8B0AD14D84F2DEE62E93F4984400A3385167EC1155F2FB79D1D6A810D2DAE21";
char anP[] = "F8EA82F2F16FBA4B42F5DD1B34F6A350D8647C7FCB31A221D311256BE8744DD9B48500C9576065D3F89E25562F1D6883A79659D773CCCCEB741FAFB124432306B4163778B9A6F50120DBDE1D123BE59D1677723552ED98F17B967C8B485D520D3AC8054783A1D038762CABF5182CA643D96CBFBECF7729F382E181E4273A0B25";
char anQ[] = "D6B3FCEA8911044179FB9AA4A25F15639A26F7996189245B0A069446ACE1843E15111A6D986C188AE4F365D746E490337F3200BE613A6F102446BEE9346222F2D708ABAF31AD0C0238F18D44A18F65D71AD7E6D0CEFE0895A404DD45B969E06D2D74090C3E4C9DEAE91A6A33E0BCD81B24E83570CA623C385C7D319388173935";
char anDP[] = "8514E4C43D1F6E2BD4F61CABF22A3770FEF0E2BB7488E9D549C2AE0E3E6F083C704E77F82DD6253B2A7E6B19E400C6233593A61F12139A2FFC9B0055263D1AD9F7A8B529BFA0AAF75A79130CD9F5DA329D936925675C0EDC7526251A56AB46363A8A3C805AB945D91A1D92266D315A078694A503C06A46ACA1FA2D772D1DD45D";
char anDQ[] = "6696FC4BC910C37AD1E1A263F65DFEA7681A24873AAEC01B6C2FF69BCAB1BB71BAB9406A8BC162FCC327764B2649C28988C688CA6F44EF9AC3EAB60052926DE6A14F3851EF27A3AC502F43743ECA793C0E4C89B2CEA55DCEBADFC42733D05E776C979C5728518DC7987891B4963745FFBA63E65D2DA740E5217484C2DCED53DD";
char anQInv[] = "8967B509F964A5F9EDE96C986DA4B3FF789DFF30F20E00CC0837185DF6FBD5182BD27B658561013AE0718BE149D23A2B248EEC9E2E528905FF5F60DA4189934E67AF91B01A52FF0F222ADE812B420A965546306EE52F8314E37F05D2051F61530444AECEB8A13F0D3BB6428BFB8588B802D0EF3659F4941BCB05CA007632541A";

static char STRING_BUFFER[16000];

char *Bytes2String(unsigned char *bytes, unsigned int len)
{
	if (len > sizeof(STRING_BUFFER) / 2)
	{
		len = sizeof(STRING_BUFFER) / 2;
	}

	if (bytes == NULL || len <= 0 || len > sizeof(STRING_BUFFER))
	{
		return NULL;
	}

	unsigned int i = 0;

	memset (STRING_BUFFER, 0, sizeof(STRING_BUFFER));
	for (i = 0; i < len; i++)
	{

		unsigned char c = bytes[i];
		unsigned char c1 = '0';
		if (c >= 0xF)
		{
			c1 = (unsigned char) ((c & 0xF0) >> 4);
			c1 = (unsigned char) (c1 < 10 ? c1 + '0' : (c1 - 10) + 'A');
		}
		STRING_BUFFER[i * 2] = c1;

		unsigned char c2 = (unsigned char) (c & 0x0F);
		c2 = (unsigned char) (c2 < 10 ? c2 + '0' : (c2 - 10) + 'A');
		STRING_BUFFER[i * 2 + 1] = c2;
	}
	STRING_BUFFER[len * 2] = '\0';
	return STRING_BUFFER;
}

#define CERT_MAXSIZE     1029
#define RKMS_CERTS_MAXNUM    4
#define RKMS_CERTS_STATUS_UNDEFINED 0xFF

struct cert_der {
	unsigned short len;
	unsigned char der[CERT_MAXSIZE];
};
typedef struct cert_der rkms_cert_der_t;

static unsigned char *getRkmsCert(int i)
{
	unsigned char *rkmsCerts[4] = {LoaderRKLSubCA_der, RKLSubCA_der, PoyntSubRoot_der, Poynt_Root_der};
//	unsigned char *rkmsCerts[4] = {RKLSubCA_der, LoaderRKLSubCA_der, PoyntSubRoot_der, Poynt_Root_der};
	if (i > 4 || i < 0)
	{
		i = 4;
	}
	return rkmsCerts[i];
}
static unsigned int getRkmsCertLen(int i)
{
	unsigned int rkmsCertsLen[4] = {LoaderRKLSubCA_der_len, RKLSubCA_der_len, PoyntSubRoot_der_len, Poynt_Root_der_len};
// 	unsigned int rkmsCertsLen[4] = {RKLSubCA_der_len, LoaderRKLSubCA_der_len, PoyntSubRoot_der_len, Poynt_Root_der_len};
	if (i > 4 || i < 0)
	{
		i = 4;
	}
	return rkmsCertsLen[i];
}

static int my_verify( void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags )
{
	char buf[1024];
	((void) data);

	mbedtls_printf( "\nVerify requested for (Depth %d):\n", depth );
	mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, "", crt );
	mbedtls_printf( "%s", buf );

	if ( ( *flags ) == 0 )
		mbedtls_printf( "  This certificate has no flags\n" );
	else
	{
		mbedtls_x509_crt_verify_info( buf, sizeof( buf ), "  ! ", *flags );
		mbedtls_printf( "%s\n", buf );
	}

	return( 0 );
}


int main(void)
{
	mbedtls_x509_crl cacrl;
	mbedtls_pk_context pkey;


	/*
 * Set to sane values
 */

	mbedtls_x509_crt cacert;
	mbedtls_x509_crt_init(&cacert);

#if defined(MBEDTLS_X509_CRL_PARSE_C)
	mbedtls_x509_crl_init( &cacrl );
#else
	/* Zeroize structure as CRL parsing is not supported and we have to pass
	   it to the verify function */
	memset( &cacrl, 0, sizeof(mbedtls_x509_crl) );
#endif
	mbedtls_pk_init( &pkey );
	mbedtls_printf("  . Loading the CA root certificate ...\n");

	int ret;
	size_t derbuflen;
	unsigned char *derbuf;
	unsigned char buf[1024];
	memset(buf, 0, sizeof(buf));

	// return total failed, or first error
	int i;
	mbedtls_printf("  . Loading the CA root certificate ...\n");
	for (i = 1; i < 3; i++)
	{
		derbuf = getRkmsCert(i);
		derbuflen = getRkmsCertLen(i);
		ret = mbedtls_x509_crt_parse_der(&cacert, derbuf, derbuflen);

		if (ret < 0)
		{
			mbedtls_printf(" Failed to parse error -0x%x\n", -ret);
			goto exit;
		}
		if (ret > 0)
		{
			mbedtls_printf(" total failed %d\n", ret);
			goto exit;
		}
		mbedtls_printf(" no failure parsing cert %d\n", i);
//		mbedtls_printf(" %d - subject %x\n", i, clicert.subject);
//		mbedtls_printf(" %d - ca_istrue %x\n", i, clicert.ca_istrue);
//		mbedtls_printf(" %d - issuer %x\n", i, clicert.issuer);
//		mbedtls_printf(" %d - issuer_id %x\n", i, clicert.issuer_id);

	}

	mbedtls_printf("  . Loading client certificates ...\n");

	mbedtls_x509_crt clicert;
	mbedtls_x509_crt_init( &clicert );
	for (i = 0; i < 1; i++)
	{
		derbuf = getRkmsCert(i);
		derbuflen = getRkmsCertLen(i);
		ret = mbedtls_x509_crt_parse_der( &clicert, derbuf, derbuflen );

		if (ret < 0)
		{
			mbedtls_printf(" Failed to parse error -0x%x\n", -ret);
			goto exit;
		}
		if (ret > 0)
		{
			mbedtls_printf(" total failed %d\n", ret);
			goto exit;
		}
		mbedtls_printf(" no failure parsing cert %d\n", i);
	}


//	mbedtls_x509_crt *cur = &clicert;
//	while( cur != NULL )
//	{
//		mbedtls_printf( "  . Peer certificate information    ...\n" );
//		ret = mbedtls_x509_crt_info( (char *) buf, sizeof( buf ) - 1, "      ",
//									 cur );
//		if( ret == -1 )
//		{
//			mbedtls_printf( " failed\n  !  mbedtls_x509_crt_info returned %d\n\n", ret );
//			goto exit;
//		}
//
//		mbedtls_printf( "%s\n", buf );
//
//		cur = cur->next;
//	}
//
	mbedtls_printf( "  . Verifying X.509 certificate..." );

	uint32_t flags;

	if( ( ret = mbedtls_x509_crt_verify( &clicert /* cert to check */, &cacert /* trusted ca chain*/, &cacrl, NULL, &flags,
										 my_verify, NULL ) ) != 0 )
	{
		char vrfy_buf[512];

		mbedtls_printf( " failed\n" );

		mbedtls_x509_crt_verify_info( vrfy_buf, sizeof( vrfy_buf ), "  ! ", flags );

		mbedtls_printf( "%s\n", vrfy_buf );
	}
	else
		mbedtls_printf( " ok\n" );

	exit:
	mbedtls_x509_crt_free( &clicert );

	mbedtls_x509_crt_free( &cacert );
#if defined(MBEDTLS_X509_CRL_PARSE_C)
	mbedtls_x509_crl_free( &cacrl );
#endif
	mbedtls_pk_free( &pkey );


}


int mainGenKey(void)
{
	unsigned char n[256];
	An2Bytes(anN, n, 256 * 2);
	mbedtls_mpi mpiN;
	mbedtls_mpi_init(&mpiN);
	mbedtls_mpi_read_binary(&mpiN, n, sizeof(n));

	unsigned char e[3];
	An2Bytes(anE, e, 3 * 2);
	mbedtls_mpi mpiE;
	mbedtls_mpi_init(&mpiE);
	mbedtls_mpi_read_binary(&mpiE, e, sizeof(e));

	unsigned char d[256];
	An2Bytes(anD, d, 256 * 2);
	mbedtls_mpi mpiD;
	mbedtls_mpi_init(&mpiD);
	mbedtls_mpi_read_binary(&mpiD, d, sizeof(d));

	unsigned char p[128];
	An2Bytes(anP, p, 128 * 2);
	mbedtls_mpi mpiP;
	mbedtls_mpi_init(&mpiP);
	mbedtls_mpi_read_binary(&mpiP, p, sizeof(p));

	unsigned char q[128];
	An2Bytes(anQ, q, 128 * 2);
	mbedtls_mpi mpiQ;
	mbedtls_mpi_init(&mpiQ);
	mbedtls_mpi_read_binary(&mpiQ, q, sizeof(q));

	unsigned char dp[128];
	An2Bytes(anDP, dp, 128 * 2);
	mbedtls_mpi mpiDP;
	mbedtls_mpi_init(&mpiDP);
	mbedtls_mpi_read_binary(&mpiDP, dp, sizeof(dp));

	unsigned char dq[128];
	An2Bytes(anDQ, dq, 128 * 2);
	mbedtls_mpi mpiDQ;
	mbedtls_mpi_init(&mpiDQ);
	mbedtls_mpi_read_binary(&mpiDQ, dq, sizeof(dq));

	unsigned char qInv[128];
	An2Bytes(anQInv, qInv, 128 * 2);
	mbedtls_mpi mpiQP;
	mbedtls_mpi_init(&mpiQP);
	mbedtls_mpi_read_binary(&mpiQP, qInv, sizeof(qInv));


	// write

	unsigned char buf[16000];
	size_t len = 0;

	memset(buf, 0, 16000);

	unsigned short size = sizeof(buf);
	int ret;
	unsigned char *c = buf + size;

	mbedtls_printf("Writing buf\n");

	MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_mpi(&c, buf, &mpiQP));
	MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_mpi(&c, buf, &mpiDQ));
	MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_mpi(&c, buf, &mpiDP));
	MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_mpi(&c, buf, &mpiQ));
	MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_mpi(&c, buf, &mpiP));
	MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_mpi(&c, buf, &mpiD));
	MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_mpi(&c, buf, &mpiE));
	MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_mpi(&c, buf, &mpiN));
	MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_int(&c, buf, 0));

	MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_len(&c, buf, len));
	MBEDTLS_ASN1_CHK_ADD(len, mbedtls_asn1_write_tag(&c, buf, MBEDTLS_ASN1_CONSTRUCTED |
															  MBEDTLS_ASN1_SEQUENCE));

	mbedtls_mpi_free(&mpiN);
	mbedtls_mpi_free(&mpiD);
	mbedtls_mpi_free(&mpiE);
	mbedtls_mpi_free(&mpiP);
	mbedtls_mpi_free(&mpiQ);
	mbedtls_mpi_free(&mpiDP);
	mbedtls_mpi_free(&mpiDQ);
	mbedtls_mpi_free(&mpiQP);

	mbedtls_printf("Writing key der file (len:%u) \n", len);


	mbedtls_printf("\nBeginning...\n");
	mbedtls_printf("%s", Bytes2String(c, (unsigned int) len));
	mbedtls_printf("\nEnd\n");

	return (0);
}
